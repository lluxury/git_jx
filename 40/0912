麻烦帮忙写个 cloudformation 部署 eventbridge和lambda, eventbridge 监听xx,target为lambda, lambda通过s3更新,

9/12/2024, 7:07:06 AM

当然可以！以下是一个示例 CloudFormation 模板，用于配置 EventBridge 规则、Lambda 函数和 S3 更新。EventBridge 规则将触发 Lambda 函数，而 Lambda 函数会处理 S3 更新事件。

CloudFormation 模板示例
yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaS3ExecutionRole

  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MyEventRule
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: MyLambdaFunctionTarget
          InputPath: '$.detail'

  EventRulePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgePolicy
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: '*'

  LambdaPermissionForEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventRule.Arn

Parameters:
  CodeS3Bucket:
    Type: String
    Description: 'The S3 bucket where the Lambda function code is stored'

  CodeS3Key:
    Type: String
    Description: 'The S3 key for the Lambda function code'

  S3Bucket:
    Type: String
    Description: 'The S3 bucket to monitor for updates'
Lambda 函数代码示例 (index.py)
这是一个简单的 Lambda 函数代码示例，用于处理 S3 更新事件。

python
import json
import boto3

def handler(event, context):
    print("Received event: " + json.dumps(event, indent=2))

    s3 = boto3.client('s3')
    s3_bucket = os.environ['S3_BUCKET']
    
    # Process the S3 event
    for record in event['Records']:
        s3_event = record['s3']
        bucket = s3_event['bucket']['name']
        key = s3_event['object']['key']
        print(f"Bucket: {bucket}, Key: {key}")
        
        # Example: Retrieve the object
        response = s3.get_object(Bucket=bucket, Key=key)
        print(response['Body'].read().decode('utf-8'))
    
    return {
        'statusCode': 200,
        'body': json.dumps('S3 event processed successfully!')
    }
说明
MyLambdaFunction: Lambda 函数的定义，代码从 S3 存储桶中读取。
LambdaExecutionRole: 为 Lambda 函数分配所需的 IAM 角色和权限。
MyEventRule: EventBridge 规则，用于监听来自 S3 的事件（示例中是 PutObject 事件）。
EventRulePolicy: 为 Lambda 函数添加必要的权限策略。
LambdaPermissionForEventBridge: 允许 EventBridge 调用 Lambda 函数。
确保将模板中的 CodeS3Bucket 和 CodeS3Key 参数替换为实际的 S3 存储桶和 Lambda 函数代码的 S3 键。S3Bucket 参数应设置为要监控的 S3 存储桶的名称。




9/12/2024, 7:09:05 AM

请一步一步分析,我需要的是lambda的代码包通过s3更新,应该有s3相关配置,并关联lambda,并不是要用lambd去处理s3

9/12/2024, 7:09:21 AM

了解了，你希望的是配置一个 Lambda 函数，它的代码包存储在 S3 中，并且有相应的配置以确保 Lambda 函数的代码包可以从 S3 更新。下面是如何一步一步地设置这个过程：

1. 创建 Lambda 函数
Lambda 函数需要从 S3 获取代码包。你需要一个 S3 存储桶来存放 Lambda 的代码包，并通过 CloudFormation 配置 Lambda 函数。

2. CloudFormation 模板
这是一个完整的 CloudFormation 模板示例，它创建一个 Lambda 函数，并将其代码包从指定的 S3 存储桶中加载：

yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          MY_ENV_VAR: "some-value"  # 如果需要环境变量，可以在这里配置

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

Parameters:
  CodeS3Bucket:
    Type: String
    Description: 'The S3 bucket where the Lambda function code is stored'

  CodeS3Key:
    Type: String
    Description: 'The S3 key for the Lambda function code'
3. Lambda 函数代码
你的 Lambda 函数代码包应该包含一个 index.py 文件，作为 Lambda 函数的入口点。确保你的代码包是一个 zip 文件，上传到 S3 存储桶中。

示例 index.py 文件内容：

python
import json

def handler(event, context):
    # 打印接收到的事件数据
    print("Received event: " + json.dumps(event, indent=2))

    # 返回成功响应
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
4. 上传 Lambda 代码包到 S3
打包 Lambda 函数代码：将 index.py 文件打包为一个 zip 文件，例如 lambda_function.zip。

bash
zip lambda_function.zip index.py
上传到 S3：将 zip 文件上传到你指定的 S3 存储桶。

bash
aws s3 cp lambda_function.zip s3://your-s3-bucket-name/path/to/lambda_function.zip
5. 部署 CloudFormation 模板
创建或更新 Stack：使用 AWS 管理控制台、AWS CLI 或 AWS SDK 部署 CloudFormation 模板。

AWS CLI 命令示例：

bash
aws cloudformation create-stack --stack-name my-lambda-stack --template-body file://template.yaml --parameters ParameterKey=CodeS3Bucket,ParameterValue=your-s3-bucket-name ParameterKey=CodeS3Key,ParameterValue=path/to/lambda_function.zip
或者如果更新现有 Stack：

bash
aws cloudformation update-stack --stack-name my-lambda-stack --template-body file://template.yaml --parameters ParameterKey=CodeS3Bucket,ParameterValue=your-s3-bucket-name ParameterKey=CodeS3Key,ParameterValue=path/to/lambda_function.zip
总结
S3 存储桶：存放 Lambda 函数的代码包。
CloudFormation 模板：定义 Lambda 函数，并从 S3 加载代码包。
上传代码包：将 Lambda 函数代码打包并上传到 S3。
部署模板：使用 CloudFormation 部署模板来创建 Lambda 函数。
这样，你就能确保 Lambda 函数的代码包可以从 S3 更新，并且配置了 Lambda 函数及其执行角色。




9/12/2024, 7:10:40 AM

更新stack动作希望通过 azure pipeline的release完成,能给出相应的配置及脚本吗,所有需要信息请moke

9/12/2024, 7:10:56 AM

当然可以。要通过 Azure Pipelines 的 Release 管道更新 CloudFormation Stack，你可以配置 Azure DevOps 以执行 AWS CLI 命令。以下是如何设置和配置 Azure Pipelines 以实现这个目标的步骤：

1. 创建 Azure Pipeline
创建一个新的 Release Pipeline：

登录到 Azure DevOps.
进入你的项目，选择 Pipelines > Releases.
点击 New pipeline 创建一个新的 Release Pipeline.
添加一个新的阶段：

点击 Add a stage，选择一个空的阶段模板。
2. 配置阶段
添加任务：

在你的阶段中，点击 + Add 来添加一个新的任务。
添加 AWS CLI 任务：

搜索 AWS CLI 任务，并添加它到你的阶段中。
配置 AWS CLI 任务：

Display name: 例如，“Update CloudFormation Stack”

AWS CLI Version: 选择 awscli 版本

AWS Access Key ID: 你的 AWS 访问密钥 ID

AWS Secret Access Key: 你的 AWS 秘密访问密钥

Region: 你的 AWS 区域（例如 us-west-2）

Command: cloudformation update-stack

Arguments: 配置你的 CloudFormation 更新命令，示例如下：

bash
--stack-name my-lambda-stack
--template-body file://template.yaml
--parameters ParameterKey=CodeS3Bucket,ParameterValue=your-s3-bucket-name ParameterKey=CodeS3Key,ParameterValue=path/to/lambda_function.zip
3. 示例脚本
如果你使用 Azure Pipelines 的 Command Line 任务来运行 AWS CLI 命令，你可以配置如下：

添加 Command Line 任务：

Display name: 例如，“Update CloudFormation Stack via CLI”

Script:

bash
#!/bin/bash

# AWS CLI configuration
aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
aws configure set region $(AWS_REGION)

# Update CloudFormation stack
aws cloudformation update-stack \
  --stack-name my-lambda-stack \
  --template-body file://$(System.DefaultWorkingDirectory)/template.yaml \
  --parameters ParameterKey=CodeS3Bucket,ParameterValue=$(S3_BUCKET) ParameterKey=CodeS3Key,ParameterValue=$(S3_KEY)
Variables:

AWS_ACCESS_KEY_ID: 填写你的 AWS 访问密钥 ID
AWS_SECRET_ACCESS_KEY: 填写你的 AWS 秘密访问密钥
AWS_REGION: 你的 AWS 区域
S3_BUCKET: 你的 S3 存储桶名称
S3_KEY: 你的 S3 键路径
配置 Artifact:

确保你的 template.yaml 文件作为 Artifact 上传，并在 Azure Pipelines 中配置它作为工作目录的一部分。
4. 触发 Release
配置触发器：

设置触发器以便当你的构建管道成功后自动启动这个 Release 管道。
运行 Release：

手动触发 Release 或等待自动触发器执行。
总结
创建 Azure Release Pipeline。
添加 AWS CLI 任务来运行 CloudFormation 更新命令。
配置所需的 AWS 凭证和参数。
触发并运行 Release 管道来更新 CloudFormation Stack。
这样配置完成后，你就能通过 Azure Pipelines 更新 CloudFormation Stack 了。




9/12/2024, 7:11:51 AM

我在azure上是有rope的,rope的更新触发ci打包,并触发上述动作

9/12/2024, 7:12:07 AM

在 Azure Pipelines 中，使用 Rope 作为触发器来更新 CI 打包并自动触发 CloudFormation 更新是一种有效的自动化方式。以下是如何配置这整个流程的详细步骤：

1. 配置 Rope 触发器
首先，确保你已经配置了 Rope（通常指的是某种变更触发机制）来触发 CI 管道。假设 Rope 是一个源代码管理工具或是某种触发事件系统，你需要确保在 Rope 中配置了适当的 Webhooks 或者其他触发机制来启动 Azure Pipelines。

2. 设置 CI 管道
确保你的 CI 管道（构建管道）配置正确，以便在 Rope 触发时执行构建任务。

创建或编辑构建管道：

登录到 Azure DevOps。
转到 Pipelines > Builds。
创建新的构建管道或编辑现有管道。
配置构建任务：

在构建任务中配置你的构建脚本。确保将构建的产物（例如 Lambda 函数包、CloudFormation 模板）上传到 Azure Pipelines 的 Artifact 存储中。
定义 Artifact：

在构建完成后，确保生成的文件（例如 lambda_function.zip 和 template.yaml）作为 Artifact 进行发布。
3. 配置 Release 管道
创建 Release Pipeline：

转到 Pipelines > Releases。
创建新的 Release Pipeline。
添加构建 Artifact：

在 Release Pipeline 中，选择 Add an artifact。
从你的 CI 管道选择构建 Artifact 作为来源。
添加阶段和任务：

添加新的阶段来定义你的 CloudFormation 更新任务。
在该阶段中，添加一个 AWS CLI 任务或者 Command Line 任务。
配置 AWS CLI 任务：

Display name: 例如，“Update CloudFormation Stack”
AWS CLI Version: 选择适当的 AWS CLI 版本
AWS Access Key ID: 你的 AWS 访问密钥 ID
AWS Secret Access Key: 你的 AWS 秘密访问密钥
Region: 你的 AWS 区域
设置 AWS CLI 命令：

在 Command 中输入：

bash
cloudformation update-stack \
  --stack-name my-lambda-stack \
  --template-body file://$(System.DefaultWorkingDirectory)/template.yaml \
  --parameters ParameterKey=CodeS3Bucket,ParameterValue=$(S3_BUCKET) ParameterKey=CodeS3Key,ParameterValue=$(S3_KEY)
确保替换 $(S3_BUCKET) 和 $(S3_KEY) 为你实际的 S3 存储桶名称和键。

4. 配置触发器
设置自动触发：

在 Release Pipeline 的 Triggers 部分，设置 Continuous deployment trigger。
选择 Enable 以在构建成功后自动触发 Release 管道。
5. 验证和运行
测试 CI/CD 流程：

确保从 Rope 触发 CI 管道，完成构建并生成 Artifact。
验证是否 Release Pipeline 自动触发，并且 AWS CLI 任务成功执行更新 CloudFormation Stack。
检查输出和日志：

在 Release Pipeline 的运行记录中检查任务输出和日志，以确保 CloudFormation Stack 更新成功。
总结
Rope 触发 CI 管道构建，并生成 Artifact。
CI 管道 将 Artifact 作为构建结果上传。
Release 管道 自动从 CI Artifact 中提取文件，并执行 CloudFormation 更新操作。
配置适当的触发器以自动化整个流程。
确保在整个过程中，所有的 AWS 凭证、参数和配置都正确无误。如果遇到问题，可以查看 Azure Pipelines 的日志来进行调试和修正。










code
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaS3ExecutionRole

  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MyEventRule
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: MyLambdaFunctionTarget
          InputPath: '$.detail'

  EventRulePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgePolicy
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: '*'

  LambdaPermissionForEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventRule.Arn

Parameters:
  CodeS3Bucket:
    Type: String
    Description: 'The S3 bucket where the Lambda function code is stored'

  CodeS3Key:
    Type: String
    Description: 'The S3 key for the Lambda function code'

  S3Bucket:
    Type: String
    Description: 'The S3 bucket to monitor for updates'






or


AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          MY_ENV_VAR: "some-value"  # 如果需要环境变量，可以在这里配置

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

Parameters:
  CodeS3Bucket:
    Type: String
    Description: 'The S3 bucket where the Lambda function code is stored'

  CodeS3Key:
    Type: String
    Description: 'The S3 key for the Lambda function code'


Ask me anything...(Shift + Enter = line break)
Ask me anything...(Shift + Enter = line break)



麻烦帮忙写个 cloudformation 部署 eventbridge和lambda, eventbridge 监听xx,target为lambda, lambda的代码包通过s3更新,应该有s3相关配置,并关联lambda,并不是要用lambd去处理s3

9/12/2024, 7:18:20 AM

当然，以下是一个 CloudFormation 模板示例，它展示了如何部署一个 EventBridge 规则和 Lambda 函数，EventBridge 监听某个事件并将事件发送到 Lambda 函数。Lambda 函数的代码包从 S3 更新：

yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              
  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Runtime: python3.8
      Code:
        S3Bucket: my-code-bucket
        S3Key: lambda/my-function.zip
      Timeout: 60

  # EventBridge Rule
  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Lambda on specific events"
      EventPattern:
        source:
          - "my.source"
        detail-type:
          - "my.event"
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: "MyLambdaFunctionTarget"
          Input: '{"key1": "value1"}'

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventBridgeRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt MyLambdaFunction.Arn
  EventBridgeRuleArn:
    Description: "ARN of the EventBridge Rule"
    Value: !GetAtt MyEventBridgeRule.Arn
说明：
LambdaExecutionRole: Lambda 函数的执行角色，具有 CloudWatch Logs 权限。
MyLambdaFunction: Lambda 函数，代码包来自 S3。
MyEventBridgeRule: EventBridge 规则，监听指定的事件源和事件类型。
LambdaInvokePermission: 授权 EventBridge 规则调用 Lambda 函数。
请根据实际情况调整 EventPattern 和 S3 存储桶的名称以及对象键。




9/12/2024, 7:21:40 AM

不是特别懂,我需要一个,s3和2个lambda的cloudfunction, lambda使用s3上的xx.zip做为自身函数代码,并通过eventbridge rule去traget 另一个使用xx1.zip的lambda

9/12/2024, 7:22:01 AM

明白了。你需要一个 CloudFormation 模板，其中包括两个 Lambda 函数，一个从 S3 更新其代码，另一个由 EventBridge 规则触发。下面是一个示例模板，展示如何配置这两个 Lambda 函数和 EventBridge 规则：

yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # First Lambda Function from S3
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction1
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Runtime: python3.8
      Code:
        S3Bucket: my-code-bucket
        S3Key: lambda/xx.zip
      Timeout: 60

  # Second Lambda Function from S3
  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction2
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Runtime: python3.8
      Code:
        S3Bucket: my-code-bucket
        S3Key: lambda/xx1.zip
      Timeout: 60

  # EventBridge Rule to Trigger Second Lambda
  MyEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger LambdaFunction2 on specific events"
      EventPattern:
        source:
          - "my.source"
        detail-type:
          - "my.event"
      Targets:
        - Arn: !GetAtt LambdaFunction2.Arn
          Id: "LambdaFunction2Target"
          Input: '{"key1": "value1"}'

  # Permission for EventBridge to Invoke Second Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction2
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventBridgeRule.Arn

Outputs:
  LambdaFunction1Arn:
    Description: "ARN of LambdaFunction1"
    Value: !GetAtt LambdaFunction1.Arn
  LambdaFunction2Arn:
    Description: "ARN of LambdaFunction2"
    Value: !GetAtt LambdaFunction2.Arn
  EventBridgeRuleArn:
    Description: "ARN of the EventBridge Rule"
    Value: !GetAtt MyEventBridgeRule.Arn
说明：
LambdaExecutionRole: Lambda 执行角色，具有日志权限。
LambdaFunction1: 从 S3 上的 xx.zip 部署的 Lambda 函数。
LambdaFunction2: 从 S3 上的 xx1.zip 部署的 Lambda 函数。
MyEventBridgeRule: EventBridge 规则，用于触发 LambdaFunction2。
LambdaInvokePermission: 允许 EventBridge 规则调用 LambdaFunction2。
请根据实际情况调整 S3Bucket 和 S3Key，以及 EventBridge 规则中的 EventPattern。
